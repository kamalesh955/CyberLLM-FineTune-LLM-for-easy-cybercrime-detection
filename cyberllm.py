# -*- coding: utf-8 -*-
"""CyberLLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gmhoqce6O0_ruXf4jJbFzuQ9nG4FDY4M
"""

from google.colab import files
uploaded = files.upload() 
!pip install transformers datasets pandas torch

import pandas as pd
from transformers import GPT2Tokenizer, GPT2LMHeadModel, Trainer, TrainingArguments, TextDataset, DataCollatorForLanguageModeling
import torch
import os

df = pd.read_csv("cybercrime_mitigation_dataset.csv")
df.columns = df.columns.str.strip()  

df = df.fillna("")

def make_prompt_completion(row):
    if row['Identification']:
        prompt = f"Scenario: {row['Identification']}\nCybercrime:"
        completion = f" {row['Cybercrime']}\nMitigation Strategies: {row['Mitigation Strategy 1']}, {row['Mitigation Strategy 2']}, {row['Mitigation Strategy 3']}"
    else:
        prompt = f"Cybercrime: {row['Cybercrime']}\nIdentification:"
        completion = f" {row['Identification']}\nMitigation Strategies: {row['Mitigation Strategy 1']}, {row['Mitigation Strategy 2']}, {row['Mitigation Strategy 3']}"
    return prompt + completion

df['text'] = df.apply(make_prompt_completion, axis=1)

with open("cybercrime_dataset.txt", "w", encoding="utf-8") as f:
    for line in df['text']:
        f.write(line + "\n")

model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
tokenizer.pad_token = tokenizer.eos_token 

model = GPT2LMHeadModel.from_pretrained(model_name)

def load_dataset(file_path, tokenizer, block_size=128):
    dataset = TextDataset(
        tokenizer=tokenizer,
        file_path=file_path,
        block_size=block_size)
    return dataset

train_dataset = load_dataset("cybercrime_dataset.txt", tokenizer)

data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer, mlm=False
)

training_args = TrainingArguments(
    output_dir="./gpt2-cybercrime",
    overwrite_output_dir=True,
    num_train_epochs=10,
    per_device_train_batch_size=2,
    save_steps=500,
    save_total_limit=2,
    prediction_loss_only=True,
    logging_steps=50,
    warmup_steps=10,
    learning_rate=5e-5,
    weight_decay=0.01
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    data_collator=data_collator
)

trainer.train()

trainer.save_model("./gpt2-cybercrime")
tokenizer.save_pretrained("./gpt2-cybercrime")

from transformers import pipeline

model_path = "./gpt2-cybercrime"
generator = pipeline("text-generation", model=model_path, tokenizer=model_path, device=-1)  

prompt = "Scenario: redirected to a suspicious website unexpectedly\nCybercrime:"
output = generator(
    prompt,
    max_new_tokens=50, 
    do_sample=True,
    temperature=0.7,
    top_p=0.9,
    truncation=True
)

print(output[0]["generated_text"])

from transformers import pipeline

model_path = "./gpt2-cybercrime"
generator = pipeline("text-generation", model=model_path, tokenizer=model_path, device=-1)

prompts = [
    "Scenario: Victim receives an email from a trusted contact, but the message contains unusual language and a suspicious attachment.\nCybercrime:",
    "Scenario: A user notices that the date typed on a login page is being recorded and transmitted to an attacker.\nCybercrime:"
]

for i, prompt in enumerate(prompts, 1):
    output = generator(
        prompt,
        max_new_tokens=50,
        do_sample=True,
        temperature=0.7,
        top_p=0.9,
        truncation=True
    )
    print(f"\nðŸ”¹ Example {i}")
    print(output[0]["generated_text"])

from transformers import pipeline

model_path = "./gpt2-cybercrime"
generator = pipeline("text-generation", model=model_path, tokenizer=model_path, device=-1)  

prompt = "Credential stuffing"
output = generator(
    prompt,
    max_new_tokens=50, 
    do_sample=True,
    temperature=0.7,
    top_p=0.9,
    truncation=True
)

print(output[0]["generated_text"])

